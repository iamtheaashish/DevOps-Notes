There are a total of 4,294,967,296 unique IPv4 addresses available
 in the Internet Protocol version 4 (IPv4) addressing scheme. 
This number is derived from the fact that IPv4 addresses are 32-bit numbers, allowing for 2^32 possible combinations.

There are a total of 340,282,366,920,938,463,463,374,607,431,768,211,456 unique
IPv6 addresses available in the Internet Protocol version 6 (IPv6) addressing scheme.
This number is derived from the fact that IPv6 addresses are 128-bit numbers, allowing for 2^128 possible combinations.

+ Having to look for the IP address when you want to visit
- a webpage will take a lifetime.
+ So we just type in the domain name we're familiar with
- and let the magical system that is the DNS to take care
- of the rest :) 

<Topics Covered In This Document>
- DNS Lookup
- TCP/IP
- HTTPS/SSL/TLS
- Server: Firewall, Load Balancer, Web Server, Application Server, Database Server

< What happens when you type a URL (let's say google.com)in a browser and hit enter? >
1. For each website, there is a unique IP address that identifies it. No one can remember IP addresses, 
2. So we use domain names instead. The Domain Name System (DNS) translates these domain names into IP addresses.
3. DNS remembers the mappings between domain names and IP addresses, allowing for quick and easy access to websites.
4. Browser needs two things hostname/domain name and IP address to establish a connection. google.com ----> IP address
5. Browser will talk to DNS server to resolve the domain name into an IP address. It converts hostname into IP address and IP address into hostname.
6. First Browser will talk to local DNS server.
```A local DNS server is usually provided by whichever system is managing your internet connection. Depending on your setup, it can come from different sources:

Your Internet Service Provider (ISP)
By default, most devices are assigned the ISP's DNS servers automatically through DHCP.
Example: Reliance Jio, Airtel, BSNL, etc., in India provide their own DNS servers.

Your Router / Home Network Gateway
Your Wi-Fi router often acts as a local DNS forwarder.
It doesn't resolve queries itself but forwards them to the ISP's DNS or a custom DNS you configure (like Google DNS or Cloudflare).
Devices on the network see the router as their "local DNS server."

Your Operating System / Local Machine
Some OSes run a stub resolver or DNS caching service (e.g., systemd-resolved on Linux, DNS Client service on Windows, mDNSResponder on macOS).
These are not full DNS servers but cache and forward queries.

Custom / Enterprise Setup
In organizations, the local DNS server is often provided by the company's internal DNS infrastructure (like Windows Active Directory DNS servers or BIND/Unbound).
This allows internal hostnames and domain resolution. ```
7. If the local DNS server does not have the IP address cached, Browser will talk to the rootname DNS server.
8. Rootname DNS server will identify how your domain name ends (e.g., .com, .org, .in etc). 
# .com is top level domain, .in is top level domain, .org is top level domain.
# in .com itself there are millions of domains.
9. The query is then forwarded to the appropriate TLD (TOP LEVEL DOMAIN) DNS server.
10. In TLD DNS server, there is a 'Name Server' that will identify the domain name "google.com".
# Name Server will identify what we are requesting for.
11. Name Server will go to SOA (Start of Authority) record to get the authoritative DNS server for "google.com".
# SOA has all the IP addresses in the name server. He is like a admin of google.com. All the IP addresses that belong to google.com are listed there.
# SOA record will provide the IP address of the authoritative DNS server for "google.com".
12. SOA will give IP address to Local DNS server.
# Experience: First time when you visit a website, it may take a bit longer as the DNS resolution process occurs.
# However, subsequent visits to the same website will be faster due to caching at various levels (browser, OS, Local DNS server).
13. Local DNS server will give IP address to Browser.
14. Browser will use the IP address to establish a connection with the web server hosting the website.
# Entire hangama is to get the IP address of the domain name.
==========
"Now it's time to talk to Google Server in Google Company"
Data Packets are the units of data that are transmitted over a network.
It contains source IP, destination IP, port number(HTTPS 443, HTTP 80, SSH 22, RDP 3389), protocol details (HTTPS over here to access google.com)and the actual data being transmitted.

# Hyper Text Transfer Protocol Secured (HTTPS), Hyper Text Transfer Protocol (HTTP)
===========
< Firewall is the one who will be stopping unauthorized access to the network or the host. >
- It monitors incoming and outgoing traffic and decides whether to allow or block specific traffic based on security rules.
- Firewalls can be hardware-based, software-based, or a combination of both.
- They are essential for protecting sensitive data and maintaining the integrity of the network.

Firewall will stop and ask your Data Packets:

1. Are you authorized to access this network?
2. Is the data you're transmitting safe and compliant with security policies?
3. Are you trying to connect to a known and trusted destination?

Based on the answers, the firewall will either allow or block the data packets.
==========
Once the data packets are allowed through the firewall, they can proceed to the Load Balancer.

< Assuming Load Balancer isn't there: >
1. So Google must be using 3 tier architecture. 
2. We are not the only one accessing google.com. There are millions of users accessing google.com at the same time.
3. There must be multiple web servers, application server and database server to handle the incoming requests. One server cannot handle all the requests from multiple clients.
4. These servers must be distributed across multiple data centers to ensure high availability and reliability.

< But How to tell the data packet which server it should go to ? >
" Load Balancer will distribute the load or traffic among the available servers based on various algorithms like: "
1. Round Robin: Distributes requests sequentially among the servers.
2. Least Connections: Directs traffic to the server with the fewest active connections.
3. IP Hash: Routes requests based on the client's IP address, ensuring consistent routing.
4. Random: Selects a server at random for each request.
5. Weighted Round Robin: Similar to Round Robin, but assigns a weight to each server based on its capacity, allowing more powerful servers to handle more requests.










































