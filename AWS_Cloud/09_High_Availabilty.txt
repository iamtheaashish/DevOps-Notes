# This note is about High Availability in AWS. Thanks to Reyaz Sir. And Shaik Ashish for clearing my doubts.

# High Availability (HA) is a crucial aspect of cloud computing that ensures a system remains operational and accessible even in the event of failures or disruptions. AWS provides various services and features to help achieve high availability for applications and workloads.

# Key Concepts of High Availability in AWS:

# 1. Redundancy: AWS allows you to deploy applications across multiple Availability Zones (AZs) within a region. This redundancy ensures that if one AZ experiences an outage, traffic can be automatically routed to healthy instances in other AZs.

# 2. Load Balancing: AWS Elastic Load Balancing (ELB) distributes incoming application traffic across multiple targets, such as EC2 instances. This helps ensure that no single instance is overwhelmed with traffic, improving overall availability.

# 3. Auto Scaling: AWS Auto Scaling automatically adjusts the number of EC2 instances in response to changing demand. This ensures that your application can handle spikes in traffic while maintaining performance and availability.

# 4. Backup and Recovery: AWS offers various backup and recovery solutions, such as Amazon S3 for data storage and AWS Backup for automated backup management. These services help protect your data and ensure quick recovery in case of failures.

# 5. Monitoring and Alerts: AWS provides monitoring tools like Amazon CloudWatch to track the health and performance of your resources. You can set up alerts to notify you of any issues, allowing for proactive management and quick resolution.

# By leveraging these AWS services and best practices, you can design and implement highly available applications that meet the needs of your users while minimizing downtime and disruptions.
===============
`The period of time the service is available to us/customer is called High Availability (HA).`

For example: An application is hosted on http://192.168.10.11/script.js 
It went down, now we have a downtime.
The period of time the application is down is called Downtime.

Now engineers cloned the application to another server with a different IP address, say http://192.168.10.12/script.js.
Application is up but it has different link. So clients have to update their bookmarks or links to point to the new URL.
No client will be happy with this kind of service.

Fate is bad, so even this server goes down. Now what?
Again new URL will be provided.
This time, engineers can use a DNS service to point the original URL to the new server's IP address.
This way, clients can continue using the same URL without any changes on their end.
------
There should be someone who is taking the traffic and distributing it to the healthy servers.
That guy is the /___LoadBalancer.

Now clients will always use the same URL, and the Load Balancer will ensure that their requests are directed to a healthy server.
Load Balancer will have it's own DNS name and DNS records that point to the healthy servers.

- How does Load Balancer know which server is working and which server is down.
- The Load Balancer continuously monitors the health of the registered servers using health checks.
- If a server fails to respond or returns an error, the Load Balancer will mark it as unhealthy and stop sending traffic to it until it recovers.
- Load Balancer does health checks every few seconds to ensure that it has up-to-date information about the status of the servers.
- If a server becomes healthy again, the Load Balancer will start sending traffic to it once more.

- FailOver: In case of a complete failure of the primary server, the Load Balancer can redirect traffic to a standby server.

- If all servers go down, the Load Balancer will stop routing traffic until at least one server becomes healthy again.
$ AutoScaling can be used to launch new instances to replace unhealthy ones and restore capacity.
Load Balancer is responsible for failover and monitoring. 

Most production load balancers (like AWS ELB, NGINX, HAProxy, F5, etc.) check the application running on the server, not just the server itself.
# Some load balancers also check server health.

# Key Concepts for High Availability:
1. Redundancy: Have multiple servers running the same application.
2. Monitoring: Continuously monitor the health of the servers.
3. Failover: In case of a server failure, redirect traffic to a standby server.

# Even have failovers for load balancers itself. Have monitoring for load balancers as well. Have health checks for load balancers to ensure they are functioning properly.

' if there is no AutoScaling, but there is failover , is downtime possible ? yes it is. 
$ Fault Tolerance: The ability of a system to continue operating without interruption when one or more of its components fail. No Downtime (ASG - Auto Scaling Group)
$ ASG (Auto Scaling Group): A group of EC2 instances that can be scaled in or out based on demand.
----
$ How Important is High Availability to the company?
1. CEO: We don't lose the sales.
2. Sales: We can extend our offer basing on HA Level.
3. Account Manager: We don't upset our customers. (that often).
4. Developers: We can be proud, our services are working.
5. System Engineers: We can sleep well (and fsck, we love to!)
6. Technical Support: No calls? Back to wow then ;)
7. Operations: We can focus on improving the system, not just keeping it running.

High Availability is crucial for maintaining business continuity and ensuring a positive user experience.

However nicely we design our systems, failures can and will happen. 
Therefore, it's essential to implement robust monitoring, failover, and redundancy strategies to minimize downtime and maintain service availability.

In summary, high availability is not just a technical requirement but a business imperative that impacts all stakeholders within the organization.
-------------
* So How many 9's?
- 99.9999999% uptime is often referred to as "seven nines" of availability.
- Each "nine" represents a factor of ten in terms of downtime.
- For example, five nines (99.999%) translates to about 5.26 minutes of downtime per year.
- Seven nines (99.9999999%) would allow for only about 31.5 microseconds of downtime per year.

- Achieving such high levels of availability typically requires significant investment in infrastructure, redundancy, and failover mechanisms.
90% = down for 36.5 days per year
95% = down for 18.25 days per year
99% = down for 3.65 days per year
99.9% = down for 8.76 hours per year                ---> 1 nine
99.99% = down for 52.56 minutes per year            ---> 2 nines
99.999% = down for 5.26 minutes per year            ---> 3 nines
99.9999% = down for 31.5 seconds per year           ---> 4 nines
99.99999% = down for 3.15 seconds per year          ---> 5 nines
99.999999% = down for 315 microseconds per year     ---> 6 nines
99.9999999% = down for 31.5 microseconds per year   ---> 7 nines
99.99999999% = down for 3.15 microseconds per year  ---> 8 nines
99.999999999% = down for 315 nanoseconds per year   ---> 9 nines
99.9999999999% = down for 31.5 nanoseconds per year  ---> 10 nines
99.99999999999% = down for 3.15 nanoseconds per year ---> 11 nines (Highest)

AWS has SLA (Service Level Agreement) for its services, which typically guarantees a certain level of availability.
For example, AWS EC2 has an SLA of 99.99% uptime, which translates to about 52.56 minutes of downtime per year. 
This means that AWS commits to ensuring that the service is available and operational for at least 99.99% of the time.

AWS has to pay for any downtime that exceeds the SLA guarantees, which can result in service credits for affected customers. 
This creates a strong incentive for AWS to maintain high availability and invest in the necessary infrastructure and redundancy.


















