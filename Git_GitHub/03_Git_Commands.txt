This notes file is in continuation of the previous notes on Git commands (./02_Git_Commands.txt).

$ git branch 
# Lists all branches in the local repository.
# The output will show the current branch, which is usually "master" or "main"
-----
$ git clean -f 
# Removes untracked files from the working directory.
# This command is useful for cleaning up files that are not being tracked by Git.
-----
$ git reset 
# Resets the current branch to a specific state.
# This command can be used to unstage changes or to reset the working directory.
# Removes file from staging area and sends it back to working area.

$ git reset test.c 
# Unstages the file "test.c" and sends it back to the working area.

$ git reset --hard HEAD
# Resets the working directory and staging area to the last commit. 
-----
* After pushing code to remote repo, other developers took the code and started to build (creating package of code), 
* and they found that the code is not working. Other developers started to complain about the code.
* They tell you to revert back the changes you made.

# Identify which commit caused problems. By using:
$ git log
# This command shows the commit history, including commit hashes, authors, dates, and commit messages
$ git revert <commit_id> 
# Creates a new commit that undoes the changes made in the specified commit

+ Is it possible to revert older commits ? No, you can only revert the latest commit. Only the latest commit can be reverted. +
-----
`Why Git is called a distributed version control system?`
* With each commit, Git creates a snapshot of the entire repository, not just the changes.
* Every developer has a complete copy of the repository, including its history.
* This allows for offline work, easy branching, and merging.
-----

BRANCH
< What is a Branch in easy terms? >
- A branch is like a separate line of development in a project. 
- It allows you to work on new features or fixes without affecting the main codebase.
- You can create, switch, and merge branches as needed.

"Developers don't work on the main or master branch directly.
Instead, they create feature branches for their work and merge them back into the main branch when complete."

- There can be n number of environments/branches based on the project requirements.
- We generally maintain atleast 3 environments/branches for projects:
1. Development environments                                             ~ developers use this environments to build and add new features
2. Testing environments or Staging environments or QA environments      ~ testers use this environments to test the code or application
3. Production environments                                              ~ this is the live environment where the application is accessible to users 

$ git branch
# Lists all branches in the local repository.

$ git branch development
# Creates a new branch called "development"

$ git branch -d development
# Deletes the "development" branch

$ git branch -m <old_branch_name> <new_branch_name>
# Renames a branch

$ git branch -d <branch_name>
# Deletes the specified branch

How to switch between branches?
$ git checkout <branch_name>
# Switches to the specified branch
* We shouldn't switch branches until we commit our changes. 
* Why ? Because uncommitted changes will be lost if we switch branches without committing.
$ git checkout -b <branch_name>
# Creates and switches to a new branch
# The new branch is created based on the current branch
------
$ git merge <branch_name>
# Merges the specified branch into the current branch

$ git merge --abort
# Aborts the merge process and restores the working directory to the state before the merge

$ git diff <branch_name>
# Shows the differences between the specified branch and the current branch
------
` When ever we have merge conflicts, we need to open the conflicting files and resolve the conflicts manually. `
------
+ IDE - Integrated Development Environment
Popular IDEs for Java:
1. IntelliJ IDEA
2. Eclipse
3. NetBeans

Popular IDEs for Python:
1. PyCharm
2. Visual Studio Code
3. Jupyter Notebook

Popular IDEs for .net:
1. Visual Studio (not VS Code)
2. JetBrains Rider
3. MonoDevelop
-----

























