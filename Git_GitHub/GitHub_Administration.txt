This text document is about GitHub administration,
covering various aspects of managing repositories, teams, and permissions within an organization.
It includes guidelines for setting up repositories, managing access controls, 
and best practices for collaboration.

* But before starting with the administration tasks,
* Let's talk about difference between Perl, Python, Shell Script and Groovy Script.
* Each of these scripting languages has its own strengths and use cases.
* Installing programming languages consume extra time and resources,
* while Shell Script is often pre-installed on most systems.
* But Shell can't always be used for complex automation tasks,
* where languages like Python or Perl might be more suitable.
* Groovy is often used in Jenkins pipelines for its seamless integration with Java.

` GitHub Administration `
=======================
https://github.com 

' GitHub ' is a web-based Source Code Management (SCM) Platform for version control and collaboration,
allowing developers to work together on projects.
It uses Git for version control and provides a user-friendly interface for managing repositories.

- We should not share source code through email or other insecure methods like pendrives. 
- Once Mithun Reddy Sir's 1friend's 2friend put pendrive in his company laptop, copied some code,
- next day 1friend went to office, plugged in internet cable,
- and some program scanned the laptop which escalated the situation to security team.
- He told that his friend used his laptop, He was fired.

- One of Mithun Reddy Sir's student, he was working as a DevOps Engineer in a company, 
- He shared shell script with his friend through company email,
- and his HR told him that he is going to be fired because he shared source code through email.

- One of Mithun Reddy Sir's student, sent some code to his personal email id from his corporate email id, he was also fired.

- So, we should not share source code through email or other insecure methods like pendrives.
- We should use Soucrce Code Management Platforms 
- like GitHub, GitLab, Bitbucket, Sub Version, Concurrent Version System, Team Foundation Server by Microsoft etc.

* Azure Repos is a feature similar to GitHub,
* but it is integrated with Microsoft Azure DevOps services.
* GitHub is widely used for open-source projects,
* while Azure Repos is often preferred for enterprise solutions within the Microsoft ecosystem.
=======================
Organization has repositories, teams, and members.
"We can create more than one repositories for a single project. 
 We can create more than one teams for a single project.
 We can have more than one members for a single team. "

We don't use public GitHub in our company.We use Enterprise GitHub. Which has url like https://mss.ghe.com

----------------------
1. Create an Organization
----------------------
- An organization is a shared account where businesses and open-source projects can collaborate across many projects at once.
- Organizations can contain multiple repositories, teams, and members.
- To create an organization, you need to have a GitHub account.
----------------------
2. Create a Repository
----------------------
- A repository is where your project files are stored.
- It can be public or private, depending on whether you want to share it with the world
- or keep it within your organization.
----------------------
3. Manage Teams
----------------------
- Teams are groups of people who work together on a project.
- You can create teams to manage permissions and access to repositories.
- Teams can be assigned specific roles, such as admin, write, or read access.
----------------------
4. Manage Members
----------------------
- Members are individuals who have access to the organization and its repositories.
- You can invite members to join your organization and assign them to teams.
- Members can have different roles, such as owner, admin, or member, which determine their permissions.
----------------------
5. Set Permissions
----------------------
- Permissions control what members can do within the organization and its repositories.
- You can set permissions at the organization level, repository level, or team level.
- Common permissions include read, write, and admin access.
----------------------
6. Collaborate on Projects
----------------------
- GitHub provides tools for collaboration, such as pull requests, issues, and discussions.
- You can use these features to review code changes, track issues, and communicate with team members
- effectively.
----------------------
7. Monitor Activity
----------------------
- GitHub provides insights and analytics to monitor the activity within your organization.
- You can track contributions, pull requests, and issues to understand how your team is performing.
- This helps in identifying bottlenecks and improving collaboration.
----------------------
8. Use GitHub Actions
----------------------
- GitHub Actions is a powerful feature that allows you to automate workflows within your repositories.
- You can create custom workflows to build, test, and deploy your code automatically.
- This helps in streamlining the development process and ensuring consistent quality.
----------------------
9. Integrate with Other Tools
----------------------
- GitHub can be integrated with various third-party tools and services, such as CI/CD pipelines,
- project management tools, and communication platforms.
- This allows you to enhance your workflow and improve collaboration across different tools.
----------------------
10. Maintain Security and Compliance
----------------------
- Security is a critical aspect of GitHub administration.
- You can enforce security policies, such as requiring two-factor authentication,
- setting branch protection rules, and managing access controls.
- Regularly review permissions and audit logs to ensure compliance with security standards.
----------------------
11. Backup and Recovery
----------------------
- Regularly back up your repositories and organization data to prevent data loss.
- GitHub provides options for exporting repositories and organization data.
- In case of accidental deletion or data loss, you can restore your repositories from backups.
----------------------
12. Stay Updated with GitHub Features
----------------------
- GitHub frequently updates its features and capabilities.
- Stay informed about new features, improvements, and best practices by following GitHub's official documentation
- and community forums.
- Participate in GitHub community discussions to learn from other users and share your experiences.
----------------------

